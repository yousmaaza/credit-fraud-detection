# .github/workflows/train.yml
name: Model Training Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run training in'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#
#    - name: Install Poetry
#      run: |
#        curl -sSL https://install.python-poetry.org | python3 -
#
#    - name: Cache Poetry dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pypoetry
#        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
#
#    - name: Install dependencies
#      run: poetry install --with dev

#    - name: Run tests
#      run: |
#        poetry run pytest tests/ --cov=fraud_detection

  train:
#    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: poetry install

    - name: Create environment file
      run: |
        if [ "${{ github.event.inputs.environment }}" = "production" ]; then
          echo "FRAUD_DETECTION_ENV=production" > .env
          echo "FRAUD_DETECTION_CONFIG=config/production.yaml" >> .env
        else
          echo "FRAUD_DETECTION_ENV=development" > .env
          echo "FRAUD_DETECTION_CONFIG=config/development.yaml" >> .env
        fi

    - name: Set up data directories
      run: |
        mkdir -p data/raw

    - name: Download and extract dataset
      run: |
        # Download dataset using curl with Kaggle token
        curl -L -o archive.zip \
          -H "Authorization: Basic ${{ secrets.KAGGLE_TOKEN }}" \
          https://www.kaggle.com/api/v1/datasets/download/mlg-ulb/creditcardfraud
        
        # Unzip to data/raw directory
        unzip archive.zip -d data/raw
        
        # Clean up zip file
        rm archive.zip
        
        # Verify file exists
        if [ ! -f data/raw/creditcard.csv ]; then
          echo "Error: creditcard.csv not found after extraction"
          exit 1
        fi
        
        echo "Successfully downloaded and extracted dataset"

    - name: Train model
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        poetry run python -m fraud_detection.core.trainer

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts-${{ github.event.inputs.environment || 'development' }}
        path: |
          models/
          mlruns/
          logs/
        retention-days: 7