name: Fraud Detection Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run in'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.6.1'
  KAGGLE_TOKEN: ${{ secrets.KAGGLE_TOKEN }}

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --with dev

    - name: Check formatting (black)
      run: poetry run black . --check

    - name: Check imports (isort)
      run: poetry run isort . --check-only

    - name: Run linter (flake8)
      run: poetry run flake8 fraud_detection/

    - name: Type checking (mypy)
      run: poetry run mypy fraud_detection/

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --with dev

    - name: Create test environment file
      run: |
        cat > .env.test << EOL
        FRAUD_DETECTION_ENV=test
        DATASET_URL=https://www.kaggle.com/api/v1/datasets/download/mlg-ulb/creditcardfraud
        DATASET_MIN_FILE_SIZE=100000000
        KAGGLE_TOKEN=${{ secrets.KAGGLE_TOKEN }}
        MLFLOW_TRACKING_URI=mlruns
        MLFLOW_REGISTRY_URI=sqlite:///mlflow_test.db
        EOL

    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ \
          --cov=fraud_detection \
          --cov-report=xml \
          --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  train:
    name: Train Model
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install

    - name: Set up environment
      env:
        ENV: ${{ github.event.inputs.environment || 'development' }}
      run: |
        # Create environment file
        cat > .env.$ENV << EOL
        FRAUD_DETECTION_ENV=$ENV
        DATASET_URL=https://www.kaggle.com/api/v1/datasets/download/mlg-ulb/creditcardfraud
        DATASET_MIN_FILE_SIZE=100000000
        KAGGLE_TOKEN=${{ secrets.KAGGLE_TOKEN }}
        EOL

    - name: Download dataset
      run: |
        poetry run fraud-detection data download \
          --env ${{ github.event.inputs.environment || 'development' }}

    - name: Train model
      run: |
        poetry run fraud-detection train run \
          --env ${{ github.event.inputs.environment || 'development' }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts-${{ github.event.inputs.environment || 'development' }}
        path: |
          models/
          mlruns/
          logs/
        retention-days: 7

    - name: Notify on completion
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Pipeline completed successfully!"
        else
          echo "❌ Pipeline failed!"
          exit 1
        fi
